<div class="container">
    <div class="row">
        <div class='col-sm-12 form-group'>
            <select id="select_visualization" onchange="changeProjection(this.value)">
                <option value="por_semana" selected="selected">Partidas por semana</option>
                <option value="por_semana_y_dia">Partidas por semana y día</option>
                <option value="ranking_juegos_partidas">Juegos más jugados (top 20)</option>
            </select>
        </div>
    </div>
    <div class="row control-rows por_semana_y_dia">
        <div>
            <input type="checkbox" id="sdLunes" name="1" checked onchange="changeProjection('por_semana_y_dia')"/>
            <label for="1">Lunes</label>
        </div>
        <div>
            <input type="checkbox" id="sdMartes" name="2" checked onchange="changeProjection('por_semana_y_dia')"/>
            <label for="2">Martes</label>
        </div>
        <div>
            <input type="checkbox" id="sdMiercoles" name="3" checked onchange="changeProjection('por_semana_y_dia')"/>
            <label for="3">Miercoles</label>
        </div>
        <div>
            <input type="checkbox" id="sdJueves" name="4" checked onchange="changeProjection('por_semana_y_dia')"/>
            <label for="4">Jueves</label>
        </div>
        <div>
            <input type="checkbox" id="sdViernes" name="5" checked onchange="changeProjection('por_semana_y_dia')"/>
            <label for="5">Viernes</label>
        </div>
        <div>
            <input type="checkbox" id="sdSabado" name="6" checked onchange="changeProjection('por_semana_y_dia')"/>
            <label for="6">Sabado</label>
        </div>
        <div>
            <input type="checkbox" id="sdDomingo" name="7" checked onchange="changeProjection('por_semana_y_dia')"/>
            <label for="7">Domingo</label>
        </div>
        <div>
            <input type="checkbox" id="sdNoJueves" name="8" onchange="changeProjection('por_semana_y_dia')"/>
            <label for="8">No Jueves</label>
        </div>
    </div>
    <div class="row control-rows ranking_juegos_partidas">
        <div>
            <input type="button" id="rj12meses" value="Últimos 12 meses" onclick="changeProjection('ranking_juegos_partidas', {months: 12})"/>
        </div>
        <div>
            <input type="button" id="rj6meses" value="Últimos 6 meses" onclick="changeProjection('ranking_juegos_partidas', {months: 6})"/>
        </div>
        <div>
            <input type="button" id="rj3meses" value="Últimos 3 meses" onclick="changeProjection('ranking_juegos_partidas', {months: 3})"/>
        </div>
        <div>
            <input type="button" id="rj1mes" value="Último mes" onclick="changeProjection('ranking_juegos_partidas', {months: 1})"/>
        </div>
    </div>
    <div class="row" style="margin-bottom: 10em; margin-top: 1em;">
        <div class='col-sm-12 form-group'>
            <div id="myplot"></div>
        </div>
    </div>
</div>
<script>
</script>
<script type="module">

    import * as Plot from "https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6/+esm";

    const plotHeight = 900;
    const plotWidth = 1100;

    window.changeProjection = function(value, options) {
        options = options || {};
        jQuery('.control-rows').hide();
        jQuery('.' + value).show();
        const plot = functions[value](options);
        const div = document.querySelector("#myplot");
        div.innerHTML = '';
        div.append(plot);
    }

    const functions = {
        por_semana: function () {
            const data = [];
            for (let i = 52; i > 0; i--) {
                const start = new Date();
                start.setDate((new Date()).getDate() - (7 * i));
                const end = new Date();
                end.setDate((new Date()).getDate() - (7 * (i - 1)));
                const partidasSemana = gameDateTimeObjects.filter(game => game.start > start && game.start < end);
                const Partidas = partidasSemana.length;
                const Semana = 52 - i;
                data.push({Partidas, Semana});
            }
            return Plot.plot({
                width: plotWidth,
                height: plotHeight,
                marks: [Plot.lineY(data, Plot.windowY(3, {x: "Semana", y: "Partidas"}))]
            })
        },
        por_semana_y_dia: function () {
            const data = [];
            for (let i = 52; i > 0; i--) {
                const start = new Date();
                start.setDate((new Date()).getDate() - (7 * i));
                const end = new Date();
                end.setDate((new Date()).getDate() - (7 * (i - 1)));
                const partidasSemana = gameDateTimeObjects.filter(game => game.start > start && game.start < end);
                const Semana = 52 - i;
                const Lunes = partidasSemana.filter(game => game.start.getDay() === 1).length;
                const Martes = partidasSemana.filter(game => game.start.getDay() === 2).length;
                const Miercoles = partidasSemana.filter(game => game.start.getDay() === 3).length;
                const Jueves = partidasSemana.filter(game => game.start.getDay() === 4).length;
                const NoJueves = partidasSemana.filter(game => game.start.getDay() !== 4).length;
                const Viernes = partidasSemana.filter(game => game.start.getDay() === 5).length;
                const Sabado = partidasSemana.filter(game => game.start.getDay() === 6).length;
                const Domingo = partidasSemana.filter(game => game.start.getDay() === 0).length;
                if (jQuery('#sdLunes').is(":checked")) {
                    data.push({Partidas: Lunes, Semana, Symbol: 'Lunes'});
                }
                if (jQuery('#sdMartes').is(":checked")) {
                    data.push({Partidas: Martes, Semana, Symbol: 'Martes'});
                }
                if (jQuery('#sdMiercoles').is(":checked")) {
                    data.push({Partidas: Miercoles, Semana, Symbol: 'Miercoles'});
                }
                if (jQuery('#sdJueves').is(":checked")) {
                    data.push({Partidas: Jueves, Semana, Symbol: 'Jueves'});
                }
                if (jQuery('#sdViernes').is(":checked")) {
                    data.push({Partidas: Viernes, Semana, Symbol: 'Viernes'});
                }
                if (jQuery('#sdSabado').is(":checked")) {
                    data.push({Partidas: Sabado, Semana, Symbol: 'Sabado'});
                }
                if (jQuery('#sdDomingo').is(":checked")) {
                    data.push({Partidas: Domingo, Semana, Symbol: 'Domingo'});
                }
                if (jQuery('#sdNoJueves').is(":checked")) {
                    data.push({Partidas: NoJueves, Semana, Symbol: 'No Jueves'});
                }
            }
            return Plot.plot({
                width: plotWidth,
                height: plotHeight,
                color: {legend: true},
                marks: [
                    Plot.lineY(data, Plot.windowY(3, {x: "Semana", y: "Partidas", stroke: "Symbol"})),
                ]
            })
        },
        ranking_juegos_partidas: function (options) {
            const data = [];
            const start = new Date();
            let days = 360;
            if (typeof options.months !== 'undefined') {
                days = options.months * 30;
            }
            start.setDate((new Date()).getDate() - days);
            const partidasRelevantes = gameDateTimeObjects.filter(game => game.start > start && game.name !== '' && game.name !== null);
            return Plot.plot({
                width: plotWidth,
                height: plotHeight,
                marginLeft: 300,
                fontSize: 14,
                x: {
                    tickSize: 1,
                    label: "Total de partidas registradas",
                    grid: 5
                },
                y: {
                    label: "Juego",
                },
                marks: [
                    Plot.ruleX([0]),
                    Plot.barX(
                        partidasRelevantes,
                        Plot.groupY({x: "count"}, {y: "name", sort: { y: "x", reverse: true, limit: 20 }, fill: "steelblue"})
                    ),
                ]
            })
        }
    };

    const gameDateTimes = JSON.parse(atob('{{ gameDateTimes }}'));
    const gameDateTimeObjects = gameDateTimes.map(gameDateTime => {return {
        start: new Date(gameDateTime.start_time),
        name: gameDateTime.name,
    }});

    window.changeProjection('por_semana');
</script>