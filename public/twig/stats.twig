<div class="container">
    <div class="row">
        <div class='col-sm-12 form-group'>
            <select id="select_visualization" onchange="changeProjection(this.value)">
                <option value="ranking_juegos_partidas" selected="selected">Juegos más jugados (top 20)</option>
                <option value="ranking_juegos_ludoteca">Juegos más sacados de la ludoteca (top 20)</option>
                <option value="peso_y_frecuencia">Peso y Frecuencia del top 20 más jugado</option>
                <option value="por_semana">Partidas por semana</option>
                <option value="por_semana_y_dia">Partidas por semana y día</option>
                <option value="por_familia">Partidas según el tipo de juego</option>
                <option value="por_meses">Visualizar partidas por meses</option>
            </select>
        </div>
    </div>
    <div class="row control-rows por_semana_y_dia">
        <div>
            <input type="checkbox" id="sdLunes" name="1" checked onchange="changeProjection('por_semana_y_dia')"/>
            <label for="1">Lunes</label>
        </div>
        <div>
            <input type="checkbox" id="sdMartes" name="2" checked onchange="changeProjection('por_semana_y_dia')"/>
            <label for="2">Martes</label>
        </div>
        <div>
            <input type="checkbox" id="sdMiercoles" name="3" checked onchange="changeProjection('por_semana_y_dia')"/>
            <label for="3">Miercoles</label>
        </div>
        <div>
            <input type="checkbox" id="sdJueves" name="4" checked onchange="changeProjection('por_semana_y_dia')"/>
            <label for="4">Jueves</label>
        </div>
        <div>
            <input type="checkbox" id="sdViernes" name="5" checked onchange="changeProjection('por_semana_y_dia')"/>
            <label for="5">Viernes</label>
        </div>
        <div>
            <input type="checkbox" id="sdSabado" name="6" checked onchange="changeProjection('por_semana_y_dia')"/>
            <label for="6">Sabado</label>
        </div>
        <div>
            <input type="checkbox" id="sdDomingo" name="7" checked onchange="changeProjection('por_semana_y_dia')"/>
            <label for="7">Domingo</label>
        </div>
        <div>
            <input type="checkbox" id="sdNoJueves" name="8" onchange="changeProjection('por_semana_y_dia')"/>
            <label for="8">No Jueves</label>
        </div>
    </div>
    <div class="row control-rows ranking_juegos_partidas">
        <div><input type="button" id="rj12meses" value="Últimos 12 meses" onclick="changeProjection('ranking_juegos_partidas', {months: 12})"/></div>
        <div><input type="button" id="rj6meses" value="Últimos 6 meses" onclick="changeProjection('ranking_juegos_partidas', {months: 6})"/></div>
        <div><input type="button" id="rj3meses" value="Últimos 3 meses" onclick="changeProjection('ranking_juegos_partidas', {months: 3})"/></div>
        <div><input type="button" id="rj1mes" value="Último mes" onclick="changeProjection('ranking_juegos_partidas', {months: 1})"/></div>
    </div>
    <div class="row control-rows ranking_juegos_ludoteca">
        <div><input type="button" id="rj12meses" value="Últimos 12 meses" onclick="changeProjection('ranking_juegos_ludoteca', {months: 12})"/></div>
        <div><input type="button" id="rj6meses" value="Últimos 6 meses" onclick="changeProjection('ranking_juegos_ludoteca', {months: 6})"/></div>
        <div><input type="button" id="rj3meses" value="Últimos 3 meses" onclick="changeProjection('ranking_juegos_ludoteca', {months: 3})"/></div>
        <div><input type="button" id="rj1mes" value="Último mes" onclick="changeProjection('ranking_juegos_ludoteca', {months: 1})"/></div>
    </div>
    <div class="row control-rows por_meses">
        <div><input type="button" id="pm1" value="Enero" onclick="changeProjection('por_meses', {month: 0})"/></div>
        <div><input type="button" id="pm2" value="Febrero" onclick="changeProjection('por_meses', {month: 1})"/></div>
        <div><input type="button" id="pm3" value="Marzo" onclick="changeProjection('por_meses', {month: 2})"/></div>
        <div><input type="button" id="pm4" value="Abril" onclick="changeProjection('por_meses', {month: 3})"/></div>
        <div><input type="button" id="pm5" value="Mayo" onclick="changeProjection('por_meses', {month: 4})"/></div>
        <div><input type="button" id="pm6" value="Junio" onclick="changeProjection('por_meses', {month: 5})"/></div>
        <div><input type="button" id="pm7" value="Julio" onclick="changeProjection('por_meses', {month: 6})"/></div>
        <div><input type="button" id="pm8" value="Agosto" onclick="changeProjection('por_meses', {month: 7})"/></div>
        <div><input type="button" id="pm9" value="Septiembre" onclick="changeProjection('por_meses', {month: 8})"/></div>
        <div><input type="button" id="pm10" value="Octubre" onclick="changeProjection('por_meses', {month: 9})"/></div>
        <div><input type="button" id="pm11" value="Noviembre" onclick="changeProjection('por_meses', {month: 10})"/></div>
        <div><input type="button" id="pm12" value="Diciembre" onclick="changeProjection('por_meses', {month: 11})"/></div>
    </div>
    <div class="row" style="margin-bottom: 10em; margin-top: 1em;">
        <div class='col-sm-12 form-group'>
            <div id="myplot"></div>
        </div>
    </div>
</div>
<script>
</script>
<script type="module">

    import * as Plot from "https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6/+esm";

    const plotHeight = 600;
    const plotWidth = 800;

    window.changeProjection = function(value, options) {
        options = options || {};
        jQuery('.control-rows').hide();
        jQuery('.' + value).show();
        const plot = functions[value](options);
        const div = document.querySelector("#myplot");
        div.innerHTML = '';
        div.append(plot);
    }

    const functions = {
        por_semana: function () {
            const data = [];
            for (let i = 52; i > 0; i--) {
                const start = new Date();
                start.setDate((new Date()).getDate() - (7 * i));
                const end = new Date();
                end.setDate((new Date()).getDate() - (7 * (i - 1)));
                const partidasSemana = gameDateTimeObjects.filter(game => game.start > start && game.start < end);
                const Partidas = partidasSemana.length;
                const Semana = 52 - i;
                data.push({Partidas, Semana});
            }
            return Plot.plot({
                width: plotWidth,
                height: plotHeight,
                marks: [Plot.lineY(data, Plot.windowY(3, {x: "Semana", y: "Partidas"}))]
            })
        },
        por_semana_y_dia: function () {
            const data = [];
            for (let i = 52; i > 0; i--) {
                const start = new Date();
                start.setDate((new Date()).getDate() - (7 * i));
                const end = new Date();
                end.setDate((new Date()).getDate() - (7 * (i - 1)));
                const partidasSemana = gameDateTimeObjects.filter(game => game.start > start && game.start < end);
                const Semana = 52 - i;
                const Lunes = partidasSemana.filter(game => game.start.getDay() === 1).length;
                const Martes = partidasSemana.filter(game => game.start.getDay() === 2).length;
                const Miercoles = partidasSemana.filter(game => game.start.getDay() === 3).length;
                const Jueves = partidasSemana.filter(game => game.start.getDay() === 4).length;
                const NoJueves = partidasSemana.filter(game => game.start.getDay() !== 4).length;
                const Viernes = partidasSemana.filter(game => game.start.getDay() === 5).length;
                const Sabado = partidasSemana.filter(game => game.start.getDay() === 6).length;
                const Domingo = partidasSemana.filter(game => game.start.getDay() === 0).length;
                if (jQuery('#sdLunes').is(":checked")) {
                    data.push({Partidas: Lunes, Semana, Symbol: 'Lunes'});
                }
                if (jQuery('#sdMartes').is(":checked")) {
                    data.push({Partidas: Martes, Semana, Symbol: 'Martes'});
                }
                if (jQuery('#sdMiercoles').is(":checked")) {
                    data.push({Partidas: Miercoles, Semana, Symbol: 'Miercoles'});
                }
                if (jQuery('#sdJueves').is(":checked")) {
                    data.push({Partidas: Jueves, Semana, Symbol: 'Jueves'});
                }
                if (jQuery('#sdViernes').is(":checked")) {
                    data.push({Partidas: Viernes, Semana, Symbol: 'Viernes'});
                }
                if (jQuery('#sdSabado').is(":checked")) {
                    data.push({Partidas: Sabado, Semana, Symbol: 'Sabado'});
                }
                if (jQuery('#sdDomingo').is(":checked")) {
                    data.push({Partidas: Domingo, Semana, Symbol: 'Domingo'});
                }
                if (jQuery('#sdNoJueves').is(":checked")) {
                    data.push({Partidas: NoJueves, Semana, Symbol: 'No Jueves'});
                }
            }
            return Plot.plot({
                width: plotWidth,
                height: plotHeight,
                color: {legend: true},
                marks: [
                    Plot.lineY(data, Plot.windowY(3, {x: "Semana", y: "Partidas", stroke: "Symbol"})),
                ]
            })
        },
        ranking_juegos_partidas: function (options) {
            const start = new Date();
            let days = 360;
            if (typeof options.months !== 'undefined') {
                days = options.months * 30;
            }
            start.setDate((new Date()).getDate() - days);
            const partidasRelevantes = gameDateTimeObjects.filter(game => game.start > start && game.base_name !== '' && game.base_name !== null);
            return Plot.plot({
                width: plotWidth,
                height: plotHeight,
                marginLeft: 300,
                fontSize: 14,
                x: {
                    tickSize: 1,
                    label: "Total de partidas registradas",
                    grid: 5
                },
                y: {
                    label: "Juego",
                },
                marks: [
                    Plot.ruleX([0]),
                    Plot.barX(
                        partidasRelevantes,
                        Plot.groupY({x: "count"}, {y: "base_name", sort: { y: "x", reverse: true, limit: 20 }, fill: "steelblue"})
                    ),
                ]
            })
        },
        ranking_juegos_ludoteca: function (options) {
            const start = new Date();
            let days = 360;
            if (typeof options.months !== 'undefined') {
                days = options.months * 30;
            }
            start.setDate((new Date()).getDate() - days);
            const partidasRelevantes = loanDateTimeObjects.filter(game => game.start > start && game.name !== '' && game.name !== null);
            return Plot.plot({
                width: plotWidth,
                height: plotHeight,
                marginLeft: 300,
                fontSize: 14,
                x: {
                    tickSize: 1,
                    label: "Total de veces sacado",
                    grid: 5
                },
                y: {
                    label: "Juego",
                },
                marks: [
                    Plot.ruleX([0]),
                    Plot.barX(
                        partidasRelevantes,
                        Plot.groupY({x: "count"}, {y: "name", sort: { y: "x", reverse: true, limit: 20 }, fill: "darksalmon"})
                    ),
                ]
            })
        },
        peso_y_frecuencia: function () {
            const start = new Date();
            start.setDate((new Date()).getDate() - 365);
            const partidasRelevantes = gameDateTimeObjects.filter(game => game.start > start && game.base_name !== '' && game.base_name !== null && game.bgg_weight > 0);
            const selection = {};
            partidasRelevantes.forEach((partida) => {
                selection[partida.base_bgg_id] = selection[partida.base_bgg_id] || {played: 0};
                selection[partida.base_bgg_id]['played']++;
                selection[partida.base_bgg_id]['image'] = partida.image;
                selection[partida.base_bgg_id]['bgg_weight'] = partida.bgg_weight;
                selection[partida.base_bgg_id]['base_name'] = partida.base_name;
            })
            const selectionMinGames = Object.values(selection).sort((a, b) => b.played >= a.played).slice(0, 20);
            return Plot.plot({
                inset: 40,
                width: plotWidth,
                height: plotHeight,
                x: {label: "Cantidad de partidas", type: 'log'},
                y: {grid: true, label: "Peso del juego"},
                marks: [
                    Plot.image(selectionMinGames, {
                        x: "played",
                        y: 'bgg_weight',
                        src: "image",
                        width: 80,
                        title: "base_name"
                    }),
                ]
            })
        },
        por_familia: function (options) {
            const start = new Date();
            start.setDate((new Date()).getDate() - 365);
            const end = new Date();
            const partidasRelevantes = gameDateTimeObjects.filter(game => game.start > start && game.start < end && game.base_name !== '' && game.base_name !== null);
            const families = {abstracts: 0, cgs: 0, thematic: 0, familygames: 0, childrensgames: 0, partygames:0, strategygames:0, wargames: 0};
            const data = {};
            for (let i = 0; i < 12; i++) {
                const mes = new Date();
                mes.setMonth(mes.getMonth() - i);
                data[mes.toLocaleString('es', { month: "long" })] = structuredClone(families);
            }
            partidasRelevantes.forEach((partida) => {
                if (partida.abstracts) {
                    data[partida.start.toLocaleString('es', { month: "long" })]['abstracts']++;
                }
                if (partida.cgs) {
                    data[partida.start.toLocaleString('es', { month: "long" })]['cgs']++;
                }
                if (partida.thematic) {
                    data[partida.start.toLocaleString('es', { month: "long" })]['thematic']++;
                }
                if (partida.familygames) {
                    data[partida.start.toLocaleString('es', { month: "long" })]['familygames']++;
                }
                if (partida.childrensgames) {
                    data[partida.start.toLocaleString('es', { month: "long" })]['childrensgames']++;
                }
                if (partida.partygames) {
                    data[partida.start.toLocaleString('es', { month: "long" })]['partygames']++;
                }
                if (partida.strategygames) {
                    data[partida.start.toLocaleString('es', { month: "long" })]['strategygames']++;
                }
                if (partida.wargames) {
                    data[partida.start.toLocaleString('es', { month: "long" })]['wargames']++;
                }
            });
            const dataPoints = [];
            const categories = {
                abstracts: 'Abstracto',
                cgs: 'TCG/CCG',
                thematic: 'Temático',
                familygames: 'Familiar',
                childrensgames: 'Infantil',
                partygames: 'Party',
                strategygames: 'Euro',
                wargames: 'Wargame'
            };
            for (let i = 11; i >= 0; i--) {
                const mes = new Date();
                mes.setMonth(mes.getMonth() - i);
                if (Object.values(data[mes.toLocaleString('es', { month: "long" })]).reduce((count, carry) => count + carry ) === 0) {
                    continue;
                }
                Object.keys(families).forEach((familyName) => {
                    const dataPointDate = new Date();
                    dataPointDate.setMonth(mes.getMonth());
                    dataPoints.push({
                        i: 12 - i,
                        month: mes,
                        date: dataPointDate,
                        partidas: data[mes.toLocaleString('es', { month: "long" })][familyName],
                        family: categories[familyName]
                    });
                })
            }
            return Plot.plot({
                y: {
                    label: "Porcentaje del total",
                },
                x: {
                    label: "Meses",
                },
                width: plotWidth,
                height: plotHeight,
                color: {legend: true},
                marks: [
                    Plot.areaY(
                        dataPoints,
                        Plot.stackY(
                            { order: 'sum', reverse: true, offset: "normalize"},
                            { x: "month", y: "partidas", z: "family", fill: "family"}
                        )
                    ),
                    Plot.ruleY([0]),
                ]
            })
        },
        por_meses: function (options) {
            const currentMonth = new Date();
            if (typeof options.month !== 'undefined') {
                currentMonth.setMonth(options.month);
            }
            const partidasRelevantes = gameDateTimeObjects.filter(game => game.start.getMonth() === currentMonth.getMonth() && game.bgg_id !== '');
            return Plot.plot({
                inset: 20,
                width: plotWidth,
                height: plotHeight,
                marks: [
                    Plot.image(
                        partidasRelevantes,
                        Plot.dodgeY({
                            x: "start",
                            r: 25, // clip to a circle
                            preserveAspectRatio: "xMidYMin slice", // try not to clip heads
                            src: "image",
                            title: "base_name"
                        })
                    )
                ]
            })
        },
    };

    const gameDateTimeObjects = JSON.parse(atob('{{ gameDateTimes }}'))
        .map(gameDateTime => {
            gameDateTime.start = new Date(gameDateTime.start_time);
            gameDateTime.image = window.location.origin + '/wp-content/plugins/wp-alcazaba/public/image/games/' + gameDateTime.base_bgg_id + '.jpg';
            gameDateTime.bgg_weight = Number(gameDateTime.bgg_weight);
            return gameDateTime;
        });

    const loanDateTimeObjects = JSON.parse(atob('{{ loanDateTimes }}'))
        .map(loanDateTime => {
            loanDateTime.start = new Date(loanDateTime.loaned_on);
            return loanDateTime;
        });

    window.changeProjection('ranking_juegos_partidas');
</script>